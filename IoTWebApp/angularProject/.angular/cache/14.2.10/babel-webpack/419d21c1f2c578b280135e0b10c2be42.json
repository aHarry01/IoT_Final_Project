{"ast":null,"code":"import * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\"; //const baseUrl1 = 'http://localhost:3000/humiditysensor';\n//const baseUrl2 = 'http://localhost:3000/lightsensor';\n\nconst baseUrl2 = 'https://www.rpigreenhousecapstone.tk:3000/lightsensor'; //const baseUrl3 = 'http://localhost:3000/moisturesensor';\n\nconst baseUrl3 = 'https://www.rpigreenhousecapstone.tk:3000/moisturesensor'; //const baseUrl4 = 'http://localhost:3000/temperaturesensor';\n\nconst baseUrl4 = 'https://www.rpigreenhousecapstone.tk:3000/temperaturesensor'; //const baseUrl5 = 'http://localhost:3000/pHsensor';\n\nconst baseUrl5 = 'https://www.rpigreenhousecapstone.tk:3000/pHsensor';\nexport let SensorService = /*#__PURE__*/(() => {\n  class SensorService {\n    constructor(http) {\n      this.http = http;\n    } // Gets all the Humidity Sensor Data\n\n\n    getAllHumidity() {\n      return this.http.get(baseUrl1);\n    } // Get Humidity Sensor Data by ID\n\n\n    getHumidityByID(id) {\n      return this.http.get(`${baseUrl1}/${id}`);\n    } // Gets all the Light Exposure Sensor Data\n\n\n    getAllLight() {\n      return this.http.get(baseUrl2);\n    } // Get Light Exposure Sensor Data by ID\n\n\n    getLightByID(id) {\n      return this.http.get(`${baseUrl2}/${id}`);\n    } // Gets all the Moisture Sensor Data\n\n\n    getAllMoisture() {\n      return this.http.get(baseUrl3);\n    } // Get Moisture Sensor Data by ID\n\n\n    getMoistureByID(id) {\n      return this.http.get(`${baseUrl3}/${id}`);\n    } // Gets all the Temperature Sensor Data\n\n\n    getAllTemperature() {\n      return this.http.get(baseUrl4);\n    } // Get Temperature Sensor Data by ID\n\n\n    getTemperatureByID(id) {\n      return this.http.get(`${baseUrl4}/${id}`);\n    } // Gets all the pH Sensor Data\n\n\n    getAllpH() {\n      return this.http.get(baseUrl5);\n    } // Get pH Sensor Data by ID\n\n\n    getpHByID(id) {\n      return this.http.get(`${baseUrl5}/${id}`);\n    }\n\n  }\n\n  SensorService.ɵfac = function SensorService_Factory(t) {\n    return new (t || SensorService)(i0.ɵɵinject(i1.HttpClient));\n  };\n\n  SensorService.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n    token: SensorService,\n    factory: SensorService.ɵfac,\n    providedIn: 'root'\n  });\n  return SensorService;\n})();","map":null,"metadata":{},"sourceType":"module"}